/*! datoteke.c
 *
 * Sucelje za rad s datotekama
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <time.h>
#include <utime.h>
#include <malloc.h>

#include <string.h>
#include <stdio.h>

#include "datoteke.h"

#define BLOK    1000
/*!
 * Dohvaca sadrzaj direktorija = popis datoteka
 * \param direktorij	Ime direktorija (relativno u odnosu na program)
 * \param broj		Adresa gdje ce se pohraniti broj datoteka
 * \returns polje s imenima datoteka, tj. kazaljka na "char *imena[*broj]"
 * Mjesto za imena se zauzima s 'malloc', nakon sto se izracunalo koliko
 * prostora treba za sve [ broj*sizeof(char *) + zbroj velicina za sva imena ]
 */
char **dohvati_datoteke ( const char *direktorij, int *broj )	// treba izbrojat fileove i vratit pomocu broja
{
		
	/* za napraviti */
		struct dirent *de = NULL;
		DIR *d = NULL;
		int brojac=0;
		char **ppimena;	//pokazivac na niz pokazivaca

		d = opendir ( direktorij ); /* 'otvara' direktorij */
		*broj=0;

		if ( d == NULL )
		{
				perror ( "opendir" );
				fprintf ( stderr, "Ne moze se otvoriti direktorij %s\n", direktorij );
				return (char **) 1;
		}

		while ( ( de = readdir ( d ) ) != NULL )
        {
                /* preskoci datoteke koje pocinju znakom '.' */
                if ( de->d_name[0] == '.' )
                        continue;

                (*broj)++;
        }

        
	// alociranje niza pokazivaca
		if( ! ( ppimena = ( char ** ) malloc ( sizeof ( char * ) * *broj ) ) )
		{
				fprintf( stderr, "Greska pri alociranju memorije\n" );
		}
	
	// opet idemo po datotekama
		closedir (d);
		d = opendir ( direktorij ); /* 'otvara' direktorij */
		while ( ( de = readdir ( d ) ) != NULL )
        {
                /* preskoci datoteke koje pocinju znakom '.' */
					if ( de->d_name[0] == '.' )
							continue;

					if( ! ( ppimena[brojac] = ( char * ) malloc ( sizeof ( char ) * strlen ( de->d_name ) ) ) )
					{
							fprintf( stderr, "Greska pri alociranju memorije\n" );
					}
					strcpy ( ppimena[brojac], de->d_name);
					brojac++;
		}
		closedir (d);
		return ppimena;
}

/*!
 * Usporedjuje dvije datoteke (samo atribute velicine i vremena zadnje promjene)
 * \param ime1	Ime prve datoteke
 * \param ime2	Ime druge datoteke
 * \returns 0, ako su datoke jednake, 1 inace
 */
int usporedi ( const char *ime1, const char *ime2 )
{
	/* za napraviti */
		struct stat stat1,stat2;

		fprintf ( stderr, "Ulazim u usporedi\n" );

		stat ( ime1, &stat1 );
		stat ( ime2, &stat2 );

		if( ( stat1.st_size == stat2.st_size ) && ( stat1.st_mtime == stat2.st_mtime ) ) 
				return 0;

		return 1;
}

/*!
 * Kopira prvu datoteku u drugu, pritom ocuva i vremena zadnje promjene
 * \param ime1	Ime prve datoteke
 * \param ime2	Ime druge datoteke
 * \returns 0, ako je kopiranje uspjesno, 1 inace
 */
int kopiraj_datoteku ( const char *ime1, const char *ime2 )
{
		FILE *d1, *d2;
		struct stat svojstva;
		struct utimbuf vremena;
		int procitano;
		char blok[BLOK];

		stat ( ime1, &svojstva );

		d1 = fopen ( ime1, "r" );
		d2 = fopen ( ime2, "w" );

		if ( d1 == NULL || d2 == NULL )
		{
				perror ( "open" );
				fprintf ( stderr, "Greska u otvaranju datoteka!\n"
						"[%s]->[%s])\n", ime1, ime2 );
				fclose ( d1 ); fclose ( d2 );
				return 1;
		}

		while ( !feof (d1) )
		{
				procitano = fread ( blok, 1, BLOK, d1 );
				fwrite ( blok, procitano, 1, d2 );
		}

		fclose ( d1 );
		fclose ( d2 );

		vremena.actime = svojstva.st_atime;
		vremena.modtime = svojstva.st_mtime;

		utime ( ime2, &vremena );
		return 0;
}

/*!
 * Dohvaca i vraca vrijeme zadnje promjene datoteke u formatu:
 * YYYY-MM-DD_HH-MM-SS, npr. 2010-07-21_17-08-05
 * \param ime		Ime datoteke
 * \param vrijeme	Adresa za smjestaj vremena
 * \returns 0, ako je dohvat uspjesan, 1 inace
 */
int vrijeme_zadnje_promjene ( const char *ime, char *vrijeme )
{
		struct stat svojstva;
		struct tm *timeinfo;

		fprintf ( stderr, "ulazim u vrijeme_zadnje_promjene\n" );

		if ( stat ( ime, &svojstva ) == -1 )
				return 1;

		timeinfo = localtime ( &svojstva.st_mtime );
		strftime ( vrijeme, 20, "%Y-%m-%d_%H-%M-%S", timeinfo );


		return 0;
}